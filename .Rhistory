set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
x3 = runif(size.tot, min=0, max=10)
x4 = runif(size.tot, min=0, max=10)
dt = cbind(x1,x2,x3,x4)
arm_1 <-  as.vector(c(-1,9,-8,4))
K1 = crossprod(t(dt),arm_1)
arm_2 <-  as.vector(c(-1,2,1,0))
K2 = crossprod(t(dt),arm_2)
arm_3 <-  as.vector(c(-1,-5,1,10))
K3 = crossprod(t(dt),arm_3)
visitor_reward <-  data.frame(K1,K2,K3)
dt <- as.data.frame(dt)
size.tot = 9000
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <-  as.data.frame(cbind(x1,x2,x3,x4,y$time_series))
colnames(dt) <- c("x1","x2","x3","x4","time_series")
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1) visitor_reward$K1[i] = visitor_reward$K1[i] + 10
if(y$cluster[i] == 2) visitor_reward$K2[i] = visitor_reward$K1[i] + 10
if(y$cluster[i] == 3) visitor_reward$K3[i] = visitor_reward$K1[i] + 10
}
size.tot = 9000
set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
x3 = runif(size.tot, min=0, max=10)
x4 = runif(size.tot, min=0, max=10)
dt = cbind(x1,x2,x3,x4)
arm_1 <-  as.vector(c(-1,9,-8,4))
K1 = crossprod(t(dt),arm_1)
arm_2 <-  as.vector(c(-1,2,1,0))
K2 = crossprod(t(dt),arm_2)
arm_3 <-  as.vector(c(-1,-5,1,10))
K3 = crossprod(t(dt),arm_3)
visitor_reward <-  data.frame(K1,K2,K3)
dt <- as.data.frame(dt)
size.tot = 9000
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <-  as.data.frame(cbind(x1,x2,x3,x4,y$time_series))
colnames(dt) <- c("x1","x2","x3","x4","time_series")
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1) visitor_reward$K1[i] = visitor_reward$K1[i] + 10
if(y$cluster[i] == 2) visitor_reward$K2[i] = visitor_reward$K1[i] + 10
if(y$cluster[i] == 3) visitor_reward$K3[i] = visitor_reward$K1[i] + 10
}
dt$cluster <- NULL
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
dt$x3 <- as.numeric(dt$x3)
dt$x4 <- as.numeric(dt$x4)
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
ctree_parameters_control$ctree_control_val$minprob = 0.05
ctree_parameters_control$explanatory_variable
listSerie = c("time_series")
listKCentroids=c(3)
View(dt)
View(K2)
View(K2)
View(K3)
View(K1)
View(visitor_reward)
#data controle
DataControlK(visitor_reward, K = K)
library(dplyr)
DataControlContextReward(dt%>% select(-listSerie), visitor_reward)
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=listKCentroids , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
#dt$cluster <- NA
#dt[1:ctree_parameters_control$learn_size , ]$cluster <- obj$dt$cluster
#dt$cluster <- as.factor(dt$cluster)
#Add clusters
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- 0
for(i in 1:length(listSerie)){
dt[[paste("cluster",listSerie[i],sep = "")]][1:ctree_parameters_control$learn_size] <- obj$clust_obj[[i]]@cluster
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,paste("cluster",listSerie[i],sep = ""))
}
ctree_parameters_control$explanatory_variable
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
temp_list
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- as.factor(dt[[paste("cluster",listSerie[i],sep = "")]])
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
#return to regular data
visitor_reward <- visitor_reward
#remove the learn set
dt.old <- dt
View(dt.old)
if(length(ctree_parameters_control$explanatory_variable)==1){
dt <- as.data.frame(dt[c((ctree_parameters_control$learn_size+1):nrow(dt)),])
colnames(dt) <- c("x")
}else{
dt <- dt[c((ctree_parameters_control$learn_size+1):nrow(dt)),]
}
visitor_reward <- visitor_reward[c((ctree_parameters_control$learn_size+1):nrow(visitor_reward)),]
#define cluster for each item
k=0
temp_i=0
for(i in listSerie){
print(i)
temp_i = temp_i + 1
k <- k + 1
for(j in (as.integer( ctree_parameters_control$learn_size  )+1): nrow(dt)){
#print(j)
temp_clust = 1
temp_clust_dist  = dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
for(l in 2:listKCentroids[k]){
#init
if(temp_clust_dist > dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[l]))$distance){
temp_clust = l
temp_clust_dist  =  dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
}
}
dt[[paste("cluster",listSerie[k],sep = "")]][j] <- as.factor( temp_clust )
}
}
temp_list
View(dt)
k
temp_i
i
j
j=901
#print(j)
temp_clust = 1
temp_clust_dist  = dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
for(l in 2:listKCentroids[k]){
#init
if(temp_clust_dist > dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[l]))$distance){
temp_clust = l
temp_clust_dist  =  dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
}
}
dt[[paste("cluster",listSerie[k],sep = "")]][j] <- as.factor( temp_clust )
dt[[paste("cluster",listSerie[k],sep = "")]][j]
dt$groups <- predict(ctree_tree, newdata=dt, type="node")
dt$choice <- 0
dt$regret <- NA
dt <- cbind(dt,visitor_reward)
groups <- dt$groups
#object for stores choices
choices <- c( rep(0,nrow(visitor_reward)))
Ctree_object <- list()
#start ucb for set upper than learn set
#get the number of arm
K= ncol(visitor_reward)
tic()
#for each groups play a private strategy of ucb
for(i in levels(as.factor(dt$groups ))){
message(paste("subset",i,sep=" "))
#Subset visitors from this segment
visitor_reward_for_ctree <- subset.data.frame(dt,dt$groups== i)
visitor_reward_for_ctree <-  visitor_reward_for_ctree [,(ncol(visitor_reward_for_ctree) -K+1):ncol(visitor_reward_for_ctree )]
#UCB results
ucb_temp_res <- UCB_rejection_sampling(visitorReward=visitor_reward_for_ctree , K=K ,alpha =ctree_parameters_control$alpha)
#update choice vector
dt[dt$groups==i,]$choice  <-ucb_temp_res$choice
#Save results
Ctree_object <- c(Ctree_object,list(i,ucb_temp_res))
rm(ucb_temp_res)
}
size.tot = 9000
set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
x3 = runif(size.tot, min=0, max=10)
x4 = runif(size.tot, min=0, max=10)
dt = cbind(x1,x2,x3,x4)
arm_1 <-  as.vector(c(-1,9,-8,4))
K1 = crossprod(t(dt),arm_1)
arm_2 <-  as.vector(c(-1,2,1,0))
K2 = crossprod(t(dt),arm_2)
arm_3 <-  as.vector(c(-1,-5,1,10))
K3 = crossprod(t(dt),arm_3)
visitor_reward <-  data.frame(K1,K2,K3)
dt <- as.data.frame(dt)
size.tot = 9000
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <-  as.data.frame(cbind(x1,x2,x3,x4,y$time_series))
colnames(dt) <- c("x1","x2","x3","x4","time_series")
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1) visitor_reward$K1[i] = 10
if(y$cluster[i] == 2) visitor_reward$K2[i] = 20
if(y$cluster[i] == 3) visitor_reward$K3[i] = 30
}
dt$cluster <- NULL
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
dt$x3 <- as.numeric(dt$x3)
dt$x4 <- as.numeric(dt$x4)
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
ctree_parameters_control$ctree_control_val$minprob = 0.05
ctree_parameters_control$explanatory_variable
listSerie = c("time_series")
listKCentroids=c(3)
dbactreeucb_rejection_sampling(dt,visitor_reward,K=ncol(visitor_reward), listKCentroids , ctree_parameters_control)){
dbactreeucb_rejection_sampling(dt,visitor_reward,K=ncol(visitor_reward), listKCentroids , ctree_parameters_control))
dbactreeucb_rejection_sampling(dt,visitor_reward,K=ncol(visitor_reward), listKCentroids , ctree_parameters_control)
#'#remove data
#'temp_list <- sample(1:nrow(visitor_reward), as.integer(size.tot/2) , replace = FALSE, prob = NULL)
#'visitor_reward$K1[temp_list] <- NA
#'visitor_reward$K2[-temp_list] <- NA
#'#run ucb on missing data
#'ctreeucb_rejection_sampling(dt,visitor_reward)
#'@import tictoc
#'
#'@export
#dbactreeucb_rejection_sampling agorithm
dbactreeucb_rejection_sampling <- function(dt,visitor_reward,K=ncol(visitor_reward), listSerie, listKCentroids , ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)){
# set.seed(4321)
### control ###
#data controle
DataControlK(visitor_reward, K = K)
library(dplyr)
DataControlContextReward(dt%>% select(-listSerie), visitor_reward)
#Change the type of data TO CHECK
#temp <-changeDataTypeForCtreeUCB(dt=dt,visitor_reward=visitor_reward,is_reward_are_boolean=ctree_parameters_control$is_reward_are_boolean)
#dt <- temp$dt
#if reward is boolean, data will be modify temporary
#temp.visitor_reward <- temp$visitor_reward
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=listKCentroids , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
#centroid <- obj$clust_obj[[1]]@centroids
#dt$cluster <- NA
#dt[1:ctree_parameters_control$learn_size , ]$cluster <- obj$dt$cluster
#dt$cluster <- as.factor(dt$cluster)
#Add clusters
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- 0
for(i in 1:length(listSerie)){
dt[[paste("cluster",listSerie[i],sep = "")]][1:ctree_parameters_control$learn_size] <- obj$clust_obj[[i]]@cluster
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,paste("cluster",listSerie[i],sep = ""))
}
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- as.factor(dt[[paste("cluster",listSerie[i],sep = "")]])
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
#return to regular data
visitor_reward <- visitor_reward
#remove the learn set
dt.old <- dt
#update handle one covariate
if(length(ctree_parameters_control$explanatory_variable)==1){
dt <- as.data.frame(dt[c((ctree_parameters_control$learn_size+1):nrow(dt)),])
colnames(dt) <- c("x")
}else{
dt <- dt[c((ctree_parameters_control$learn_size+1):nrow(dt)),]
}
visitor_reward <- visitor_reward[c((ctree_parameters_control$learn_size+1):nrow(visitor_reward)),]
### Training  ###
#define cluster for each item
k=0
temp_i=0
for(i in listSerie){
print(i)
temp_i = temp_i + 1
k <- k + 1
for(j in (as.integer( ctree_parameters_control$learn_size  )+1): nrow(dt)){
#print(j)
temp_clust = 1
temp_clust_dist  = dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
for(l in 2:listKCentroids[k]){
#init
if(temp_clust_dist > dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[l]))$distance){
temp_clust = l
temp_clust_dist  =  dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
}
}
dt[[paste("cluster",listSerie[k],sep = "")]][j] <- as.factor( temp_clust )
}
}
######
dt$groups <- predict(ctree_tree, newdata=dt, type="node")
dt$choice <- 0
dt$regret <- NA
dt <- cbind(dt,visitor_reward)
groups <- dt$groups
#object for stores choices
choices <- c( rep(0,nrow(visitor_reward)))
Ctree_object <- list()
#start ucb for set upper than learn set
#get the number of arm
K= ncol(visitor_reward)
tic()
#for each groups play a private strategy of ucb
for(i in levels(as.factor(dt$groups ))){
message(paste("subset",i,sep=" "))
#Subset visitors from this segment
visitor_reward_for_ctree <- subset.data.frame(dt,dt$groups== i)
visitor_reward_for_ctree <-  visitor_reward_for_ctree [,(ncol(visitor_reward_for_ctree) -K+1):ncol(visitor_reward_for_ctree )]
#UCB results
ucb_temp_res <- UCB_rejection_sampling(visitorReward=visitor_reward_for_ctree , K=K ,alpha =ctree_parameters_control$alpha)
#update choice vector
dt[dt$groups==i,]$choice  <-ucb_temp_res$choice
#Save results
Ctree_object <- c(Ctree_object,list(i,ucb_temp_res))
rm(ucb_temp_res)
}
time <- toc()
#return  data , models, groups and results
return(list('data_reward'=visitor_reward,'data_context'=dt,'groups'=groups,'ctree_ucb'=Ctree_object,'first_train_element'=(ctree_parameters_control$learn_size+1) ,'time'=(time$toc - time$tic),'choice'=dt$choice,'tree'= ctree_tree))
}
dbactreeucb_rejection_sampling(dt,visitor_reward,K, listSerie, listKCentroids , ctree_parameters_control)
# set.seed(4321)
### control ###
#data controle
DataControlK(visitor_reward, K = K)
library(dplyr)
DataControlContextReward(dt%>% select(-listSerie), visitor_reward)
#Change the type of data TO CHECK
#temp <-changeDataTypeForCtreeUCB(dt=dt,visitor_reward=visitor_reward,is_reward_are_boolean=ctree_parameters_control$is_reward_are_boolean)
#dt <- temp$dt
#if reward is boolean, data will be modify temporary
#temp.visitor_reward <- temp$visitor_reward
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=listKCentroids , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
#centroid <- obj$clust_obj[[1]]@centroids
#dt$cluster <- NA
#dt[1:ctree_parameters_control$learn_size , ]$cluster <- obj$dt$cluster
#dt$cluster <- as.factor(dt$cluster)
#Add clusters
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- 0
for(i in 1:length(listSerie)){
dt[[paste("cluster",listSerie[i],sep = "")]][1:ctree_parameters_control$learn_size] <- obj$clust_obj[[i]]@cluster
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,paste("cluster",listSerie[i],sep = ""))
}
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- as.factor(dt[[paste("cluster",listSerie[i],sep = "")]])
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
#return to regular data
visitor_reward <- visitor_reward
#remove the learn set
dt.old <- dt
#update handle one covariate
if(length(ctree_parameters_control$explanatory_variable)==1){
dt <- as.data.frame(dt[c((ctree_parameters_control$learn_size+1):nrow(dt)),])
colnames(dt) <- c("x")
}else{
dt <- dt[c((ctree_parameters_control$learn_size+1):nrow(dt)),]
}
visitor_reward <- visitor_reward[c((ctree_parameters_control$learn_size+1):nrow(visitor_reward)),]
### Training  ###
#define cluster for each item
k=0
temp_i=0
for(i in listSerie){
print(i)
temp_i = temp_i + 1
k <- k + 1
for(j in (as.integer( ctree_parameters_control$learn_size  )+1): nrow(dt)){
#print(j)
temp_clust = 1
temp_clust_dist  = dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
for(l in 2:listKCentroids[k]){
#init
if(temp_clust_dist > dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[l]))$distance){
temp_clust = l
temp_clust_dist  =  dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
}
}
dt[[paste("cluster",listSerie[k],sep = "")]][j] <- as.factor( temp_clust )
}
}
######
View(visitor_reward)
View(dt.old)
dt$groups <- predict(ctree_tree, newdata=dt, type="node")
View(dt)
dt[[paste("cluster",listSerie[k],sep = "")]][901]
dt[[paste("cluster",listSerie[k],sep = "")]][1]
j=1
#define cluster for each item
k=0
temp_i=0
for(i in listSerie){
print(i)
temp_i = temp_i + 1
k <- k + 1
for(j in 1: nrow(dt)){
#print(j)
temp_clust = 1
temp_clust_dist  = dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
for(l in 2:listKCentroids[k]){
#init
if(temp_clust_dist > dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[l]))$distance){
temp_clust = l
temp_clust_dist  =  dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
}
}
dt[[paste("cluster",listSerie[k],sep = "")]][j] <- as.factor( temp_clust )
}
}
dt$groups <- predict(ctree_tree, newdata=dt, type="node")
dt$choice <- 0
dt$regret <- NA
dt <- cbind(dt,visitor_reward)
groups <- dt$groups
#object for stores choices
choices <- c( rep(0,nrow(visitor_reward)))
Ctree_object <- list()
#start ucb for set upper than learn set
#get the number of arm
K= ncol(visitor_reward)
tic()
#for each groups play a private strategy of ucb
for(i in levels(as.factor(dt$groups ))){
message(paste("subset",i,sep=" "))
#Subset visitors from this segment
visitor_reward_for_ctree <- subset.data.frame(dt,dt$groups== i)
visitor_reward_for_ctree <-  visitor_reward_for_ctree [,(ncol(visitor_reward_for_ctree) -K+1):ncol(visitor_reward_for_ctree )]
#UCB results
ucb_temp_res <- UCB_rejection_sampling(visitorReward=visitor_reward_for_ctree , K=K ,alpha =ctree_parameters_control$alpha)
#update choice vector
dt[dt$groups==i,]$choice  <-ucb_temp_res$choice
#Save results
Ctree_object <- c(Ctree_object,list(i,ucb_temp_res))
rm(ucb_temp_res)
}
time <- toc()
