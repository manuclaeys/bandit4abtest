visitor_reward <-  data.frame(K1,K2 )
summary(visitor_reward)
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <- as.data.frame(cbind(x1,x2,y))
View(dt)
dt$cluster <- NA
View(dt)
dt$cluster <- NULL
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward))
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
#data controle
DataControlK(visitor_reward, K = K)
View(ctree_parameters_control)
ctree_parameters_control
listSerie = c("time_series")
?within()
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,"cluster")
ctree_parameters_control$explanatory_variable
ctree_parameters_control$explanatory_variable <- within(ctree_parameters_control$explanatory_variable , rm(listSerie))
ctree_parameters_control$explanatory_variable[ - listSerie ]
ctree_parameters_control$explanatory_variable <- within(ctree_parameters_control$explanatory_variable , rm(as.character(listSerie)))
ctree_parameters_control$explanatory_variable[names(ctree_parameters_control$explanatory_variable)] %in% listSerie == FALSE ]
ctree_parameters_control$explanatory_variable[names(ctree_parameters_control$explanatory_variable) %in% listSerie == FALSE ]
names(ctree_parameters_control$explanatory_variable) %in% listSerie
names(ctree_parameters_control$explanatory_variable)
ctree_parameters_control$explanatory_variable
ctree_parameters_control$explanatory_variable[names(ctree_parameters_control$explanatory_variable)]
ctree_parameters_control$explanatory_variable[names(unlist(ctree_parameters_control$explanatory_variable))]
temp_list =  ctree_parameters_control$explanatory_variable
temp_list
manes(temp_list)
nanes(temp_list)
names(temp_list)
unlist( temp_list)
names(unlist( temp_list))
temp_list !=  listSerie
temp_list[ temp_list !=  listSerie]
#data controle
DataControlK(visitor_reward, K = K)
#Change the type of data
temp <-changeDataTypeForCtreeUCB(dt=dt,visitor_reward=visitor_reward,is_reward_are_boolean=ctree_parameters_control$is_reward_are_boolean)
View(temp)
dt <- temp$dt
View(dt)
#if reward is boolean, data will be modify temporary
temp.visitor_reward <- temp$visitor_reward
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=c(3) , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
centroid <- obj$clust_obj[[1]]@centroids
dt$cluster <- NA
dt[1:ctree_parameters_control$learn_size , ] <- obj$dt$cluster
dt$cluster <- as.factor(dt$cluster)
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,"cluster")
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
##### Pairewise #####
set.seed(1234)
size.tot <- 9000
x <- seq(0, 5, 0.01)
x1<- sample(x, size.tot, replace = TRUE, prob = NULL)
arm_1 <-  as.vector(c(2,-1,1.5,0))
K1 <- (x1 < 1 ) * arm_1[4]  +
(x1 >= 1 & x1 < 2 ) * arm_1[1]  +
(x1 >= 2 & x1 < 3) * arm_1[2]  +
(x1 >= 3 & x1 < 4) * arm_1[3]  +
(x1 >= 4) * arm_1[4]
plot(x1, K1)
arm_2 <-  as.vector(c(1.5,-0.5,1.25,0))
K2 <- (x1 < 1 ) * arm_2[4]  +
(x1 >= 1 & x1 < 2 ) * arm_2[1]  +
(x1 >= 2 & x1 < 3) * arm_2[2]  +
(x1 >= 3 & x1 < 4) * arm_2[3]  +
(x1 >= 4) * arm_2[4]
plot(x1, K2)
#covariate without interest
x2<- sample(x, size.tot, replace = TRUE, prob = NULL)
#Results for each variation
visitor_reward <-  data.frame(K1,K2 )
summary(visitor_reward)
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <- as.data.frame(cbind(x1,x2,y$time_series))
View(dt)
colnames(dt) <- c("x1","x2","time_series")
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
ctree_parameters_control$explanatory_variable
ctree_parameters_control$learn_size
ctree_parameters_control$learn_size = 2000
listSerie = c("time_series")
#data controle
DataControlK(visitor_reward, K = K)
#Change the type of data
temp <-changeDataTypeForCtreeUCB(dt=dt,visitor_reward=visitor_reward,is_reward_are_boolean=ctree_parameters_control$is_reward_are_boolean)
dt <- temp$dt
##### Pairewise #####
set.seed(1234)
size.tot <- 9000
x <- seq(0, 5, 0.01)
x1<- sample(x, size.tot, replace = TRUE, prob = NULL)
arm_1 <-  as.vector(c(2,-1,1.5,0))
K1 <- (x1 < 1 ) * arm_1[4]  +
(x1 >= 1 & x1 < 2 ) * arm_1[1]  +
(x1 >= 2 & x1 < 3) * arm_1[2]  +
(x1 >= 3 & x1 < 4) * arm_1[3]  +
(x1 >= 4) * arm_1[4]
plot(x1, K1)
arm_2 <-  as.vector(c(1.5,-0.5,1.25,0))
K2 <- (x1 < 1 ) * arm_2[4]  +
(x1 >= 1 & x1 < 2 ) * arm_2[1]  +
(x1 >= 2 & x1 < 3) * arm_2[2]  +
(x1 >= 3 & x1 < 4) * arm_2[3]  +
(x1 >= 4) * arm_2[4]
plot(x1, K2)
#covariate without interest
x2<- sample(x, size.tot, replace = TRUE, prob = NULL)
#Results for each variation
visitor_reward <-  data.frame(K1,K2 )
summary(visitor_reward)
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <- as.data.frame(cbind(x1,x2,y$time_series))
colnames(dt) <- c("x1","x2","time_series")
dt$cluster <- NULL
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
ctree_parameters_control$explanatory_variable
ctree_parameters_control$learn_size = 2000
listSerie = c("time_series")
#data controle
DataControlK(visitor_reward, K = K)
#if reward is boolean, data will be modify temporary
temp.visitor_reward <- temp$visitor_reward
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=c(3) , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
centroid <- obj$clust_obj[[1]]@centroids
dt$cluster <- NA
dt[1:ctree_parameters_control$learn_size , ] <- obj$dt$cluster
dt$cluster <- as.factor(dt$cluster)
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,"cluster")
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
View(dt)
View(dt)
dt <- as.data.frame(dt)
View(dt)
temp <-changeDataTypeForCtreeUCB(dt=dt,visitor_reward=visitor_reward,is_reward_are_boolean=ctree_parameters_control$is_reward_are_boolean)
toto <- temp$dt
View(toto)
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
?ctreeucb_parameters_control_default
?LINUCB
##### Pairewise #####
set.seed(1234)
size.tot <- 9000
x <- seq(0, 5, 0.01)
x1<- sample(x, size.tot, replace = TRUE, prob = NULL)
arm_1 <-  as.vector(c(2,-1,1.5,0))
K1 <- (x1 < 1 ) * arm_1[4]  +
(x1 >= 1 & x1 < 2 ) * arm_1[1]  +
(x1 >= 2 & x1 < 3) * arm_1[2]  +
(x1 >= 3 & x1 < 4) * arm_1[3]  +
(x1 >= 4) * arm_1[4]
plot(x1, K1)
arm_2 <-  as.vector(c(1.5,-0.5,1.25,0))
K2 <- (x1 < 1 ) * arm_2[4]  +
(x1 >= 1 & x1 < 2 ) * arm_2[1]  +
(x1 >= 2 & x1 < 3) * arm_2[2]  +
(x1 >= 3 & x1 < 4) * arm_2[3]  +
(x1 >= 4) * arm_2[4]
plot(x1, K2)
#covariate without interest
x2<- sample(x, size.tot, replace = TRUE, prob = NULL)
#Results for each variation
visitor_reward <-  data.frame(K1,K2 )
summary(visitor_reward)
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <- as.data.frame(cbind(x1,x2,y$time_series))
View(dt)
colnames(dt) <- c("x1","x2","time_series")
dt$cluster <- NULL
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
ctree_parameters_control$learn_size = 2000
listSerie = c("time_series")
toto <- dt[,- as.character(listSerie)]
toto <- dt[,-listSerie]
library(dplyr)
toto <- dt%>% select(-listSerie)
View(toto)
DataControlContextReward(dt%>% select(-listSerie), visitor_reward)
dt <- as.data.frame(dt)
dt$x1 <( as.numeric(dt$x1))
dt$x1 <- as.numeric(dt$x1))
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
View(dt)
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=c(3) , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
centroid <- obj$clust_obj[[1]]@centroids
dt$cluster <- NA
dt[1:ctree_parameters_control$learn_size , ] <- obj$dt$cluster
dt$cluster <- as.factor(dt$cluster)
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,"cluster")
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
View(visitor_reward)
ctree_control_val = ctree_parameters_control$ctree_control_val,
ctree_control_val = ctree_parameters_control$ctree_control_val
arm_for_learn = ctree_parameters_control$arm_for_learn
explanatory_variable= temp_list
learn_size = ctree_parameters_control$learn_size
print=TRUE
# set.seed(1234)
dt <- dt[1:learn_size,]
visitor_reward <-  visitor_reward[1:learn_size,]
#extract element of the list
elt <- c(explanatory_variable[1])
explanatory_variable= temp_list
if(length(explanatory_variable)>1){
for(i in 2:length(explanatory_variable)) elt<- paste(elt, explanatory_variable[i], sep = " + ")
}
explanatory_variable
#update corrct bug where we had only one covariate
dt <- as.data.frame(dt)
if(length(explanatory_variable)==1){
colnames(dt) <- c("x")
elt <- c("x")
}
#add one variation restult to the data
dt$arm_for_learn <-  visitor_reward[,arm_for_learn]
Formula <-  paste("arm_for_learn "," ~ " , elt, sep = "")
Formula <- as.formula(Formula)
Formula
View(obj)
View(dt)
reg_tree <- ctree(formula = Formula , dt,control = ctree_control_val, na.action = na.exclude)
library(partykit)
reg_tree <- ctree(formula = Formula , dt,control = ctree_control_val, na.action = na.exclude)
if(print==TRUE) plot(reg_tree)
reg_tree <- ctree(formula = Formula , dt,control = ctree_control_val, na.action = na.exclude)
if(print==TRUE) plot(reg_tree)
##### Pairewise #####
set.seed(1234)
size.tot <- 9000
x <- seq(0, 5, 0.01)
x1<- sample(x, size.tot, replace = TRUE, prob = NULL)
arm_1 <-  as.vector(c(2,-1,1.5,0))
K1 <- (x1 < 1 ) * arm_1[4]  +
(x1 >= 1 & x1 < 2 ) * arm_1[1]  +
(x1 >= 2 & x1 < 3) * arm_1[2]  +
(x1 >= 3 & x1 < 4) * arm_1[3]  +
(x1 >= 4) * arm_1[4]
plot(x1, K1)
arm_2 <-  as.vector(c(1.5,-0.5,1.25,0))
K2 <- (x1 < 1 ) * arm_2[4]  +
(x1 >= 1 & x1 < 2 ) * arm_2[1]  +
(x1 >= 2 & x1 < 3) * arm_2[2]  +
(x1 >= 3 & x1 < 4) * arm_2[3]  +
(x1 >= 4) * arm_2[4]
plot(x1, K2)
#covariate without interest
x2<- sample(x, size.tot, replace = TRUE, prob = NULL)
#Results for each variation
visitor_reward <-  data.frame(K1,K2 )
summary(visitor_reward)
# Time series
alpha_list <- c(1,2,3)
beta_list <- c(0.5,0.1,-0.2)
theta_list <- c(0.8,0.2,0.5)
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (j in 1:3000){
for (i in 1:length(alpha_list)){
n = sample(1:100,1)
t <- 1:n
ts <- alpha_list[i] + beta_list[i] * t + arima.sim(list(ma = theta_list[i]), n = length(t))
y[temp, "time_series"][[1]] <- list(ts)
y[temp, "cluster"][[1]] <- i
y$ID[temp] = temp
temp = temp +1
}
}
y <- y[sample(nrow(y)),]
dt <- as.data.frame(cbind(x1,x2,y$time_series))
colnames(dt) <- c("x1","x2","time_series")
dt$cluster <- NULL
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward)
ctree_parameters_control$ctree_control_val$minprob
ctree_parameters_control$ctree_control_val$minprob = 0.2
ctree_parameters_control$learn_size = 2000
listSerie = c("time_series")
#data controle
DataControlK(visitor_reward, K = K)
library(dplyr)
DataControlContextReward(dt%>% select(-listSerie), visitor_reward)
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:ctree_parameters_control$learn_size , ] , method = "DBA" , listKCentroids=c(3) , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
centroid <- obj$clust_obj[[1]]@centroids
dt$cluster <- NA
dt[1:ctree_parameters_control$learn_size , ] <- obj$dt$cluster
dt$cluster <- as.factor(dt$cluster)
#Add cluster to explanatory variables
ctree_parameters_control$explanatory_variable <- c( ctree_parameters_control$explanatory_variable,"cluster")
temp_list =  ctree_parameters_control$explanatory_variable
#Remove series for ctreeucb learning step (we keep the clusters)
temp_list =  temp_list[ temp_list !=  listSerie]
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
ctree_parameters_control$learn_size = 8000
ctree_parameters_control$ctree_control_val$minprob = 0.4
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
ctree_parameters_control$learn_size = 8000
#Generate formula and tree
ctree_tree <- ctree_formula_generate(dt = dt,
visitor_reward = visitor_reward,
# visitor_reward = temp.visitor_reward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,
explanatory_variable= temp_list,
learn_size = ctree_parameters_control$learn_size,
print=TRUE)
learn_size = ctree_parameters_control$learn_size
learn_size
ctree_control_val = ctree_parameters_control$ctree_control_val
arm_for_learn = ctree_parameters_control$arm_for_learn
explanatory_variable= temp_list
learn_size = ctree_parameters_control$learn_size
print=TRUE
# set.seed(1234)
dt <- dt[1:learn_size,]
visitor_reward <-  visitor_reward[1:learn_size,]
#extract element of the list
elt <- c(explanatory_variable[1])
if(length(explanatory_variable)>1){
for(i in 2:length(explanatory_variable)) elt<- paste(elt, explanatory_variable[i], sep = " + ")
}
#update corrct bug where we had only one covariate
dt <- as.data.frame(dt)
if(length(explanatory_variable)==1){
colnames(dt) <- c("x")
elt <- c("x")
}
#add one variation restult to the data
dt$arm_for_learn <-  visitor_reward[,arm_for_learn]
Formula <-  paste("arm_for_learn "," ~ " , elt, sep = "")
Formula <- as.formula(Formula)
reg_tree <- ctree(formula = Formula , dt,control = ctree_control_val, na.action = na.exclude)
if(print==TRUE) plot(reg_tree)
reg_tree <- ctree(formula = Formula , dt, na.action = na.exclude)
if(print==TRUE) plot(reg_tree)
