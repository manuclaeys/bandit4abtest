K2 = rep(0,size.tot)
# Time series
#premier type : petite série et peu de visites
#taille de la série
x <- 1:10
#fréquence
f <- x/5
y1 <-  jitter( cos(2*pi*f*x) , factor = 1)
plot(x, y1, type='l', col='darkblue')
x <- 1:20
f <- x/3
y2 <- jitter(  5*cos(2*pi*f*x) , factor = 1)
plot(x, y2, type='l', col='darkblue')
x <- 1:40
f <- x/3
y3 <- jitter(  10*cos(2*pi*f*x) , factor = 1)
plot(x, y3, type='l', col='darkblue')
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (i in 1:size.tot){
if(i%%3 == 0){
y[temp, "time_series"][[1]] <- list(unlist(y1)  +   rnorm(10, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 1
}
if(i%%3 == 1){
y[temp, "time_series"][[1]] <-  list(unlist(y2)  +   rnorm(20, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 2
}
if(i%%3 == 2){
y[temp, "time_series"][[1]] <- list(unlist(y3)  +   rnorm(40, mean = 0, sd = 3))
y[temp, "cluster"][[1]] <- 3
}
y$ID[temp] = temp
temp = temp +1
}
dt <-  as.data.frame(cbind(x1,x2,y$time_series))
colnames(dt) <- c("x1","x2","time_series")
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
K3 = rep(0,size.tot)
visitor_reward <-  data.frame(K1,K2,K3)
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1){
visitor_reward$K1[i] = 10
visitor_reward$K2[i] = 5
visitor_reward$K3[i] = 0
}
if(y$cluster[i] == 2){
visitor_reward$K1[i] = 5
visitor_reward$K2[i] = 0
visitor_reward$K3[i] = 10
}
if(y$cluster[i] == 3){
visitor_reward$K1[i] = 0
visitor_reward$K2[i] = 10
visitor_reward$K3[i] = 5
}
}
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward, alpha = 5)
listSerie = c("time_series")
listKCentroids=c(3)
resVal <- dbactreeucbRejectionSamplingBanditObjectEvaluation(dt,visitor_reward,K, listSerie, listKCentroids , ctree_parameters_control)
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
K=ncol(visitor_reward)
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward, alpha = 5)
listSerie = c("time_series")
listKCentroids=c(3)
resVal <- dbactreeucbRejectionSamplingBanditObjectEvaluation(dt,visitor_reward,K, listSerie, listKCentroids , ctree_parameters_control)
choiceList <- resVal$dbactreeucb_rejection_sampling_bandit_alloc$choice
summary(as.factor(choiceList))
rewardABtest <- visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
regret <- cumulativeRegret(choiceList ,rewardABtest)
hist(choice)
hist(choiceList)
?DBALINUCB_rejection_sampling
View(visitor_reward)
View(dt)
###### Comparatif avec DBALinUCB
tempDT <- dt
?sapply
sapply(dt$time_series,mean)
tempDT$meanTS <- sapply(dt$time_series,mean)
View(tempDT)
mean(tempDT[1,]$time_series)
medt$time_series[1]
edt$time_series[1]
dt$time_series[1]
mean(dt$time_series[1])
mean(unlist(dt$time_series[1]))
View(dt)
?ctreeucb_parameters_control_default
###### Comparatif avec DBALinUCB
dbalinucb_rejection_sampling_alloc  <- DBALINUCB_rejection_sampling(dt[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
alpha=5, K=ncol(visitor_reward),
listSerie, listKCentroids ,
learn_size = as.integer(nrow(dt)*0.1),
IsRewardAreBoolean = FALSE)
dt = dt[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
visitor_reward = visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
alpha=5, K=ncol(visitor_reward)
listSerie, listKCentroids
learn_size = as.integer(nrow(dt)*0.1)
IsRewardAreBoolean = FALSE
listCategorial=0
listInteger=0
alpha=5
K=ncol(visitor_reward)
listSerie, listKCentroids
listSerie = listSerie
listKCentroids = listKCentroids
#data formating
explanatory_variable = c(listCategorial,listInteger)
visitorReward <- as.matrix(visitor_reward)
### learning  ###
#Learn Clustering
obj <- createClusters(listSerie = listSerie , dt = dt[1:learn_size , ] , method = "DBA" , listKCentroids=listKCentroids , plotCentroids = TRUE , plotClusters = TRUE , maxIter = 10L )
#Add clusters
for(i in 1:length(listSerie)) dt[[paste("cluster",listSerie[i],sep = "")]] <- 0
for(i in 1:length(listSerie)){
dt[[paste("cluster",listSerie[i],sep = "")]][1:learn_size] <- obj$clust_obj[[i]]@cluster
}
#Choose a cluster for the test dataset
#define cluster for each item
k=0
temp_i=0
for(i in listSerie){
print(i)
temp_i = temp_i + 1
k <- k + 1
for(j in learn_size:nrow(dt)){
#print(j)
temp_clust = 1
temp_clust_dist  = dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
for(l in 2:listKCentroids[k]){
#init
if(temp_clust_dist > dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[l]))$distance){
temp_clust = l
#print(l)
temp_clust_dist  =  dtw2(unlist(dt[[i]][j]), unlist(obj$clust_obj[[1]]@centroids[1]))$distance
}
}
dt[[paste("cluster",listSerie[k],sep = "")]][j] <- temp_clust
}
}
for(i in 1:length(listSerie)){
dt[[paste("cluster",listSerie[i],sep = "")]] <- as.factor(dt[[paste("cluster",listSerie[i],sep = "")]])
listCategorial= c(listCategorial,paste("cluster",listSerie[i],sep = ""))
}
#### Test step
if(listCategorial[1]  == 0) listCategorial = listCategorial[-1]
#keep old dt for return theta hat function
dt.old <- dt
D <- transform_categorial_to_binary(listCategorial= listCategorial, listInteger=listInteger,dt = as.data.frame(dt[,c(listCategorial,listInteger)]))
listInteger
listCategorial
View(dt)
listInteger = c('x1','x2')
View(dt)
D <- transform_categorial_to_binary(listCategorial= listCategorial, listInteger=listInteger,dt = as.data.frame(dt[,c(listCategorial,listInteger)]))
View(D)
size.tot = 9000
set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
# Time series
#premier type : petite série et peu de visites
#taille de la série
x <- 1:10
#fréquence
f <- x/5
y1 <-  jitter( cos(2*pi*f*x) , factor = 1)
plot(x, y1, type='l', col='darkblue')
x <- 1:20
f <- x/3
y2 <- jitter(  5*cos(2*pi*f*x) , factor = 1)
plot(x, y2, type='l', col='darkblue')
x <- 1:40
f <- x/3
y3 <- jitter(  10*cos(2*pi*f*x) , factor = 1)
plot(x, y3, type='l', col='darkblue')
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (i in 1:size.tot){
if(i%%3 == 0){
y[temp, "time_series"][[1]] <- list(unlist(y1)  +   rnorm(10, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 1
}
if(i%%3 == 1){
y[temp, "time_series"][[1]] <-  list(unlist(y2)  +   rnorm(20, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 2
}
if(i%%3 == 2){
y[temp, "time_series"][[1]] <- list(unlist(y3)  +   rnorm(40, mean = 0, sd = 3))
y[temp, "cluster"][[1]] <- 3
}
y$ID[temp] = temp
temp = temp +1
}
dt <-  as.data.frame(cbind(x1,x2,y$time_series))
colnames(dt) <- c("x1","x2","time_series")
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
K3 = rep(0,size.tot)
visitor_reward <-  data.frame(K1,K2,K3)
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1){
visitor_reward$K1[i] = 10
visitor_reward$K2[i] = 5
visitor_reward$K3[i] = 0
}
if(y$cluster[i] == 2){
visitor_reward$K1[i] = 5
visitor_reward$K2[i] = 0
visitor_reward$K3[i] = 10
}
if(y$cluster[i] == 3){
visitor_reward$K1[i] = 0
visitor_reward$K2[i] = 10
visitor_reward$K3[i] = 5
}
}
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
K=ncol(visitor_reward)
#Parametrage
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward, alpha = 5,learn_size = as.integer(nrow(dt) * 0.1))
listSerie = c("time_series")
listKCentroids=c(3)
resVal <- dbactreeucbRejectionSamplingBanditObjectEvaluation(dt,visitor_reward,K, listSerie, listKCentroids , ctree_parameters_control)
#Evaluation
choiceList <- resVal$dbactreeucb_rejection_sampling_bandit_alloc$choice
summary(as.factor(choiceList))
rewardABtest <- visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
regret <- cumulativeRegret(choiceList ,rewardABtest)
hist(choiceList)
###### Comparatif avec DBALinUCB
dbalinucb_rejection_sampling_alloc  <- DBALINUCB_rejection_sampling(dt[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
alpha=5, K=ncol(visitor_reward),
listSerie, listKCentroids ,
learn_size = as.integer(nrow(dt)*0.1),
IsRewardAreBoolean = FALSE,
listCategorial=0 , listInteger=c("x1","x2"))
#Evaluation
choiceListDBALINUCB <-  dbalinucb_rejection_sampling_alloc$choice
summary(as.factor(choiceListDBALINUCB))
regret2 <- cumulativeRegret(choiceListDBALINUCB ,rewardABtest)
regret2 <- cumulativeRegret(choiceListDBALINUCB,rewardABtest)
###### Comparatif avec DBALinUCB
dbalinucb_rejection_sampling_alloc  <- DBALINUCB_rejection_sampling(dt,
visitor_reward,
alpha=5, K=ncol(visitor_reward),
listSerie, listKCentroids ,
learn_size = as.integer(nrow(dt)*0.1),
IsRewardAreBoolean = FALSE,
listCategorial=0 , listInteger=c("x1","x2"))
#Evaluation
choiceListDBALINUCB <-  dbalinucb_rejection_sampling_alloc$choice
summary(as.factor(choiceListDBALINUCB))
regret2 <- cumulativeRegret(choiceListDBALINUCB,rewardABtest)
hist(choiceList)
hist(choiceListDBALINUCB)
?LinucbBanditObjectEvaluation
###### Comparatif avec LinUCB
dt$meanTS <- sapply(dt$time_series,mean)
dbalinucb_alloc  <- LinucbBanditObjectEvaluation(
dt[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
alpha = 5,
K = ncol(visitor_reward),
average = FALSE,
IsRewardAreBoolean = FALSE,
explanatory_variable = c("x1","x2","meanTS")
)
dt = dt[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
visitor_reward = visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
alpha=5
K=ncol(visitor_reward)
listSerie = listSerie
listKCentroids = listKCentroids
explanatory_variable = c("x1","x2","meanTS")
size.tot = 9000
set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
# Time series
#premier type : petite série et peu de visites
#taille de la série
x <- 1:10
#fréquence
f <- x/5
y1 <-  jitter( cos(2*pi*f*x) , factor = 1)
plot(x, y1, type='l', col='darkblue')
x <- 1:20
f <- x/3
y2 <- jitter(  5*cos(2*pi*f*x) , factor = 1)
plot(x, y2, type='l', col='darkblue')
x <- 1:40
f <- x/3
y3 <- jitter(  10*cos(2*pi*f*x) , factor = 1)
plot(x, y3, type='l', col='darkblue')
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (i in 1:size.tot){
if(i%%3 == 0){
y[temp, "time_series"][[1]] <- list(unlist(y1)  +   rnorm(10, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 1
}
if(i%%3 == 1){
y[temp, "time_series"][[1]] <-  list(unlist(y2)  +   rnorm(20, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 2
}
if(i%%3 == 2){
y[temp, "time_series"][[1]] <- list(unlist(y3)  +   rnorm(40, mean = 0, sd = 3))
y[temp, "cluster"][[1]] <- 3
}
y$ID[temp] = temp
temp = temp +1
}
dt <-  as.data.frame(cbind(x1,x2,y$time_series))
colnames(dt) <- c("x1","x2","time_series")
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
K3 = rep(0,size.tot)
visitor_reward <-  data.frame(K1,K2,K3)
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1){
visitor_reward$K1[i] = 10
visitor_reward$K2[i] = 5
visitor_reward$K3[i] = 0
}
if(y$cluster[i] == 2){
visitor_reward$K1[i] = 5
visitor_reward$K2[i] = 0
visitor_reward$K3[i] = 10
}
if(y$cluster[i] == 3){
visitor_reward$K1[i] = 0
visitor_reward$K2[i] = 10
visitor_reward$K3[i] = 5
}
}
dt$x1 <- as.numeric(dt$x1)
dt$x2 <- as.numeric(dt$x2)
K=ncol(visitor_reward)
#Parametrage
ctree_parameters_control=ctreeucb_parameters_control_default(dt,visitor_reward, alpha = 5,learn_size = as.integer(nrow(dt) * 0.1))
listSerie = c("time_series")
listKCentroids=c(3)
resVal <- dbactreeucbRejectionSamplingBanditObjectEvaluation(dt,visitor_reward,K, listSerie, listKCentroids , ctree_parameters_control)
#Evaluation
choiceList <- resVal$dbactreeucb_rejection_sampling_bandit_alloc$choice
summary(as.factor(choiceList))
rewardABtest <- visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ]
regret <- cumulativeRegret(choiceList ,rewardABtest)
hist(choiceList)
###### Comparatif avec DBALinUCB
dbalinucb_rejection_sampling_alloc  <- DBALINUCB_rejection_sampling(dt,
visitor_reward,
alpha=5, K=ncol(visitor_reward),
listSerie, listKCentroids ,
learn_size = as.integer(nrow(dt)*0.1),
IsRewardAreBoolean = FALSE,
listCategorial=0 , listInteger=c("x1","x2"))
#Evaluation
choiceListDBALINUCB <-  dbalinucb_rejection_sampling_alloc$choice
summary(as.factor(choiceListDBALINUCB))
regret2 <- cumulativeRegret(choiceListDBALINUCB,rewardABtest)
hist(choiceListDBALINUCB)
###### Comparatif avec LinUCB
dt$meanTS <- sapply(dt$time_series,mean)
dbalinucb_alloc  <- LinucbBanditObjectEvaluation(
dt[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , c("x1","x2","meanTS")],
visitor_reward[ resVal$dbactreeucb_rejection_sampling_bandit_alloc$first_train_element : nrow(dt)   , ],
alpha = 5,
K = ncol(visitor_reward),
average = FALSE,
IsRewardAreBoolean = FALSE,
explanatory_variable = c("x1","x2","meanTS")
)
#Evaluation
choiceListLINUCB <-  dbalinucb_alloc$linucb_bandit_alloc$choice
summary(as.factor(choiceListLINUCB))
regret2 <- cumulativeRegret(choiceListLINUCB,rewardABtest)
regret3 <- cumulativeRegret(choiceListLINUCB,rewardABtest)
hist(choiceListLINUCB)
# original data in a 'wide' format
x  <- seq(-2, 2, 0.05)
x
# original data in a 'wide' format
x  <- 1:length(regret1)
# original data in a 'wide' format
x  <- 1:length(regret1)
regret1 <- cumulativeRegret(choiceList ,rewardABtest)
# original data in a 'wide' format
x  <- 1:length(regret1)
regret1
total <- data.frame(x, y1, y2, y3)
y1 <- regret1
y2 <- regret2
y3 <- regret3
total <- data.frame(x, y1, y2, y3)
# melt the data to a long format
df2 <- melt(data = total, id.vars = "x")
####Plot all
library(ggplot2)
library(reshape2)
# melt the data to a long format
df2 <- melt(data = total, id.vars = "x")
# plot, using the aesthetics argument 'colour'
ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
regret2 <- cumulativeRegret(choiceListDBALINUCB,rewardABtest)
y2 <- regret2
y3 <- regret3
total <- data.frame(x, y1, y2, y3)
# melt the data to a long format
df2 <- melt(data = total, id.vars = "x")
# plot, using the aesthetics argument 'colour'
ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
Regret_LIN_UCB  <- regret3
Regret_DBA_CTREE_UCB <- regret1
Regret_DBA_LIN_UCB  <- regret2
Regret_LIN_UCB  <- regret3
total <- data.frame(x, y1, y2, y3)
# melt the data to a long format
df2 <- melt(data = total, id.vars = "x")
total <- data.frame(x, Regret_DBA_CTREE_UCB , Regret_DBA_LIN_UCB, Regret_LIN_UCB )
# melt the data to a long format
df2 <- melt(data = total, id.vars = "x")
# plot, using the aesthetics argument 'colour'
ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
size.tot = 9000
set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
# Time series
#premier type : petite série et peu de visites
#taille de la série
x <- 1:10
#fréquence
f <- x/5
y1 <-  jitter( cos(2*pi*f*x) , factor = 1)
plot(x, y1, type='l', col='darkblue')
x <- 1:20
f <- x/3
y2 <- jitter(  5*cos(2*pi*f*x) , factor = 1)
plot(x, y2, type='l', col='darkblue')
x <- 1:40
f <- x/3
y3 <- jitter(  10*cos(2*pi*f*x) , factor = 1)
plot(x, y3, type='l', col='darkblue')
y <- as.data.frame(c(1))
colnames(y) = "ID"
temp=1
for (i in 1:size.tot){
if(i%%3 == 0){
y[temp, "time_series"][[1]] <- list(unlist(y1)  +   rnorm(10, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 1
}
if(i%%3 == 1){
y[temp, "time_series"][[1]] <-  list(unlist(y2)  +   rnorm(20, mean = 0, sd = 2))
y[temp, "cluster"][[1]] <- 2
}
if(i%%3 == 2){
y[temp, "time_series"][[1]] <- list(unlist(y3)  +   rnorm(40, mean = 0, sd = 3))
y[temp, "cluster"][[1]] <- 3
}
y$ID[temp] = temp
temp = temp +1
}
dt <-  as.data.frame(cbind(x1,x2,y$time_series))
colnames(dt) <- c("x1","x2","time_series")
K1 = rep(0,size.tot)
K2 = rep(0,size.tot)
K3 = rep(0,size.tot)
visitor_reward <-  data.frame(K1,K2,K3)
for(i in 1:nrow(dt)) {
if(y$cluster[i] == 1){
visitor_reward$K1[i] = 10 +   rnorm(1, mean = 0, sd = 1)
visitor_reward$K2[i] = 5  +   rnorm(1, mean = 0, sd = 1)
visitor_reward$K3[i] = 0  +   rnorm(1, mean = 0, sd = 1)
}
if(y$cluster[i] == 2){
visitor_reward$K1[i] = 5 +   rnorm(1, mean = 0, sd = 1)
visitor_reward$K2[i] = 0 +   rnorm(1, mean = 0, sd = 1)
visitor_reward$K3[i] = 10 +   rnorm(1, mean = 0, sd = 1)
}
if(y$cluster[i] == 3){
visitor_reward$K1[i] = 0 +   rnorm(1, mean = 0, sd = 1)
visitor_reward$K2[i] = 10 +   rnorm(1, mean = 0, sd = 1)
visitor_reward$K3[i] = 5 +   rnorm(1, mean = 0, sd = 1)
}
}
titi <- density(visitor_reward$K1)
titi$x
plot(density(visitor_reward$K1))
lines(density(visitor_reward$K2))
lines(density(visitor_reward$K3))
